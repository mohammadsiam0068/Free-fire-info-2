# ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ рж▓рж╛ржЗржмрзНрж░рзЗрж░рж┐ ржЗржорзНржкрзЛрж░рзНржЯ ржХрж░рзБржи
import logging
import requests
import os # ржПржЗ рж▓рж╛ржЗржиржЯрж┐ 'os' ржоржбрж┐ржЙрж▓ ржЗржорзНржкрзЛрж░рзНржЯ ржХрж░рж╛рж░ ржЬржирзНржп

from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# рж▓ржЧрж┐ржВ рж╕рзЗржЯржЖржк ржХрж░рзБржи ржпрж╛рждрзЗ ржЖржкржирж┐ ржмржЯрзЗрж░ ржХрж╛рж░рзНржпржХрж▓рж╛ржк ржжрзЗржЦрждрзЗ ржкрж╛рж░рзЗржи
# ржПржЯрж┐ ржмржЯрзЗрж░ ржХрж╛рж░рзНржпржХрж▓рж╛ржк ржПржмржВ рж╕ржорзНржнрж╛ржмрзНржп рж╕ржорж╕рзНржпрж╛ржЧрзБрж▓рзЛ ржЯрзНрж░рзНржпрж╛ржХ ржХрж░рждрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рзЗред
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ржЖржкржирж╛рж░ ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржмржЯ ржЯрзЛржХрзЗржи ржПржиржнрж╛ржпрж╝рж░ржиржорзЗржирзНржЯ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ ржерзЗржХрзЗ ржирж┐ржиред
# Render.com-ржП ржпржЦржи ржбрж┐ржкрзНрж▓ржпрж╝ ржХрж░ржмрзЗржи, рждржЦржи ржПржЗ 'joy banhla'ржирж╛ржорзЗ ржПржиржнрж╛ржпрж╝рж░ржиржорзЗржирзНржЯ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ рж╕рзЗржЯ ржХрж░ржмрзЗржиред
# рж▓рзЛржХрж╛рж▓рж┐ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рж╛рж░ рж╕ржоржпрж╝, ржЖржкржирж┐ ржЖржкржирж╛рж░ рж╕рж┐рж╕рзНржЯрзЗржорзЗрж░ ржПржиржнрж╛ржпрж╝рж░ржиржорзЗржирзНржЯ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ рж╣рж┐рж╕рзЗржмрзЗ ржПржЯрж┐ рж╕рзЗржЯ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред
TELEGRAM_BOT_TOKEN = os.environ.get("7940124369:AAHsl3z8awdJ7L651zSBUNbLeNO80eTTKdg")
if not TELEGRAM_BOT_TOKEN:
    # ржпржжрж┐ ржЯрзЛржХрзЗржи ржирж╛ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝, рждрж╛рж╣рж▓рзЗ ржПрж░рж░ рж▓ржЧ ржХрж░рзБржи ржПржмржВ ржкрзНрж░рзЛржЧрзНрж░рж╛ржо ржмржирзНржз ржХрж░рзБржиред
    logger.error("TELEGRAM_BOT_TOKEN environment variable not set. Exiting.")
    exit(1)
# ржЖржкржирж╛рж░ ржлрзНрж░рж┐ ржлрж╛ржпрж╝рж╛рж░ ржкрзНрж▓рзЗржпрж╝рж╛рж░ ржЗржиржлрзЛ API ржПрж░ ржмрзЗрж╕ URL
# ржПржЗ URL ржЯрж┐ ржкрзНрж▓рзЗржпрж╝рж╛рж░рзЗрж░ рждржерзНржп ржЖржирждрзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣ржмрзЗред
PLAYER_INFO_API_BASE_URL = "https://aditya-info-v11op.onrender.com/player-info"

# /start ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    ржЗржЙржЬрж╛рж░ ржпржЦржи /start ржХржорж╛ржирзНржб ржжрзЗржпрж╝ рждржЦржи ржПржЗ ржлрж╛ржВрж╢ржиржЯрж┐ ржХрж╛ржЬ ржХрж░рзЗред
    ржЗржЙржЬрж╛рж░ржХрзЗ рж╕рзНржмрж╛ржЧрждржо ржмрж╛рж░рзНрждрж╛ ржПржмржВ ржмржЯ ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржирж┐рж░рзНржжрзЗрж╢ржирж╛ ржжрзЗржпрж╝ред
    """
    user = update.effective_user
    # HTML ржлрж░ржорзНржпрж╛ржЯрзЗ ржЙрждрзНрждрж░ ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝ ржпрж╛рждрзЗ ржЗржЙржЬрж╛рж░ржирзЗржо рж▓рж┐ржЩрзНржХ ржЖржХрж╛рж░рзЗ ржжрзЗржЦрж╛ржирзЛ ржпрж╛ржпрж╝ред
    await update.message.reply_html(
        f"рж╣рж╛ржЗ {user.mention_html()}! ЁЯСЛ\n"
        "ржлрзНрж░рж┐ ржлрж╛ржпрж╝рж╛рж░ ржкрзНрж▓рзЗржпрж╝рж╛рж░рзЗрж░ рждржерзНржп ржЬрж╛ржирждрзЗ, `/player_info <UID> <region>` ржлрж░рзНржорзНржпрж╛ржЯрзЗ ржХржорж╛ржирзНржб ржжрж┐ржиред\n"
        "ржЙржжрж╛рж╣рж░ржг: `/player_info 6681145827 bd`"
    )
    # рж▓ржЧ ржХрж░рзБржи ржХрзЗ /start ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗржЫрзЗред
    logger.info(f"Start command received from {user.id}")

# /player_info ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
async def player_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    ржЗржЙржЬрж╛рж░ ржпржЦржи /player_info ржХржорж╛ржирзНржб ржжрзЗржпрж╝ рждржЦржи ржПржЗ ржлрж╛ржВрж╢ржиржЯрж┐ ржХрж╛ржЬ ржХрж░рзЗред
    ржЗржЙржЬрж╛рж░рзЗрж░ ржжрзЗржУржпрж╝рж╛ UID ржПржмржВ region ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ API ржерзЗржХрзЗ ржкрзНрж▓рзЗржпрж╝рж╛рж░рзЗрж░ рждржерзНржп ржирж┐ржпрж╝рзЗ ржЖрж╕рзЗ ржПржмржВ ржЗржЙржЬрж╛рж░ржХрзЗ ржжрзЗржЦрж╛ржпрж╝ред
    """
    args = context.args # ржХржорж╛ржирзНржбрзЗрж░ ржкрж░ ржЗржЙржЬрж╛рж░ ржпрж╛ ржЗржиржкрзБржЯ ржжрж┐ржпрж╝рзЗржЫрзЗ рждрж╛ ржЧрзНрж░рж╣ржг ржХрж░рзБржиред
    # ржХржорж╛ржирзНржбрзЗрж░ рж╕рж╛ржерзЗ UID ржПржмржВ region ржжрзЗржУржпрж╝рж╛ рж╣ржпрж╝рзЗржЫрзЗ ржХрж┐ржирж╛ рждрж╛ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржиред
    if not args or len(args) != 2:
        await update.message.reply_text(
            "ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ рж╕ржарж┐ржХ ржлрж░рзНржорзНржпрж╛ржЯрзЗ UID ржПржмржВ region ржжрж┐ржиред\n"
            "ржЙржжрж╛рж╣рж░ржг: `/player_info 6681145827 bd`"
        )
        # ржнрзБрж▓ ржЗржиржкрзБржЯрзЗрж░ ржЬржирзНржп ржПржХржЯрж┐ рж╕рждрж░рзНржХржмрж╛рж░рзНрждрж╛ рж▓ржЧ ржХрж░рзБржиред
        logger.warning(f"Invalid player_info command from {update.effective_user.id}: {update.message.text}")
        return # ржлрж╛ржВрж╢ржиржЯрж┐ ржПржЦрж╛ржирзЗ рж╢рзЗрж╖ ржХрж░рзБржиред

    uid = args[0] # ржкрзНрж░ржержо ржЖрж░рзНржЧрзБржорзЗржирзНржЯ UID рж╣рж┐рж╕рзЗржмрзЗ ржирж┐ржиред
    region = args[1].lower() # ржжрзНржмрж┐рждрзАржпрж╝ ржЖрж░рзНржЧрзБржорзЗржирзНржЯ region рж╣рж┐рж╕рзЗржмрзЗ ржирж┐ржи ржПржмржВ ржЫрзЛржЯ рж╣рж╛рждрзЗрж░ ржЕржХрзНрж╖рж░рзЗ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рзБржиред

    # API рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯрзЗрж░ ржЬржирзНржп рж╕ржорзНржкрзВрж░рзНржг URL рждрзИрж░рж┐ ржХрж░рзБржиред
    api_url = f"{PLAYER_INFO_API_BASE_URL}?uid={uid}&region={region}"
    # ржХрзЛржи API URL ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ рждрж╛ рж▓ржЧ ржХрж░рзБржиред
    logger.info(f"Fetching player info for UID: {uid}, Region: {region} from API: {api_url}")

    try:
        # API рждрзЗ HTTP GET рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ ржкрж╛ржарж╛ржиред
        response = requests.get(api_url)
        # ржпржжрж┐ HTTP ржПрж░рж░ (ржпрзЗржоржи 404 Not Found, 500 Internal Server Error) рж╣ржпрж╝, рждрж╛рж╣рж▓рзЗ ржПржХржЯрж┐ ржПржХрзНрж╕рзЗржкрж╢ржи рждрзИрж░рж┐ ржХрж░рзБржиред
        response.raise_for_status()

        # API ржерзЗржХрзЗ ржкрзНрж░рж╛ржкрзНржд JSON ржбрзЗржЯрж╛ ржкрж╛рж░рзНрж╕ ржХрж░рзБржиред
        data = response.json()

        # API рж░рзЗрж╕ржкржирзНрж╕ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржи: 'status' 'success' ржПржмржВ 'data' ржХрзАржЧрзБрж▓рзЛ ржЖржЫрзЗ ржХрж┐ржирж╛ред
        if data.get("status") == "success" and data.get("data"):
            player_data = data["data"]
            # ржкрзНрж▓рзЗржпрж╝рж╛рж░рзЗрж░ рждржерзНржп рж╕рзБржирзНржжрж░ржнрж╛ржмрзЗ ржлрж░ржорзНржпрж╛ржЯ ржХрж░рзЗ ржПржХржЯрж┐ ржмрж╛рж░рзНрждрж╛ рждрзИрж░рж┐ ржХрж░рзБржиред
            # ржПржЦрж╛ржирзЗ MarkdownV2 ржлрж░ржорзНржпрж╛ржЯрж┐ржВ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред
            message = (
                f"тЬи ржкрзНрж▓рзЗржпрж╝рж╛рж░рзЗрж░ рждржерзНржп тЬи\n"
                f"-----------------------------------\n"
                f"ЁЯЖФ **UID:** `{player_data.get('uid', 'N/A')}`\n"
                f"ЁЯСд **ржкрзНрж▓рзЗржпрж╝рж╛рж░рзЗрж░ ржирж╛ржо:** `{player_data.get('player_name', 'N/A')}`\n"
                f"ЁЯМЯ **рж▓рзЗржнрзЗрж▓:** `{player_data.get('level', 'N/A')}`\n"
                f"ЁЯПЖ **рж░тАНрзНржпрж╛ржЩрзНржХ:** `{player_data.get('rank', 'N/A')}`\n"
                f"ЁЯЫбя╕П **ржЧрж┐рж▓рзНржбрзЗрж░ ржирж╛ржо:** `{player_data.get('guild_name', 'N/A')}`\n"
                f"ЁЯМН **ржЕржЮрзНржЪрж▓:** `{player_data.get('region', 'N/A').upper()}`\n" # ржЕржЮрзНржЪрж▓ржХрзЗ ржмржбрж╝ рж╣рж╛рждрзЗрж░ ржЕржХрзНрж╖рж░рзЗ ржжрзЗржЦрж╛ржиред
                f"-----------------------------------"
            )
            # MarkdownV2 ржлрж░ржорзНржпрж╛ржЯрзЗ ржЗржЙржЬрж╛рж░ржХрзЗ ржЙрждрзНрждрж░ ржкрж╛ржарж╛ржиред
            await update.message.reply_markdown_v2(message)
            logger.info(f"Successfully sent player info for UID {uid} to {update.effective_user.id}")
        else:
            # ржпржжрж┐ API ржПрж░рж░ ржмрж╛рж░рзНрждрж╛ ржжрзЗржпрж╝ ржмрж╛ рждржерзНржп ржирж╛ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ред
            error_message = data.get("message", "ржкрзНрж▓рзЗржпрж╝рж╛рж░рзЗрж░ рждржерзНржп ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред UID ржмрж╛ ржЕржЮрзНржЪрж▓ ржнрзБрж▓ рж╣рждрзЗ ржкрж╛рж░рзЗред")
            await update.message.reply_text(f"ржжрзБржГржЦрж┐ржд, рждржерзНржп ржЖржирждрзЗ ржкрж╛рж░рж┐ржирж┐: {error_message}")
            logger.warning(f"API returned an error for UID {uid}: {error_message}")

    except requests.exceptions.RequestException as e:
        # ржирзЗржЯржУржпрж╝рж╛рж░рзНржХ ржмрж╛ API ржПрж░ рж╕рж╛ржерзЗ рж╕ржВржпрзЛржЧрзЗрж░ рж╕ржорж╕рзНржпрж╛рж░ ржЬржирзНржп ржПрж░рж░ рж╣рзНржпрж╛ржирзНржбрж▓рж┐ржВред
        await update.message.reply_text(
            "API ржПрж░ рж╕рж╛ржерзЗ рж╕ржВржпрзЛржЧ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржЪрзНржЫрзЗред ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред"
        )
        logger.error(f"Request to API failed for UID {uid}: {e}")
    except ValueError as e:
        # JSON ржкрж╛рж░рзНрж╕рж┐ржВ ржПрж░рж░ рж╣рж▓рзЗ рж╣рзНржпрж╛ржирзНржбрж▓рж┐ржВ (ржпржжрж┐ API ржерзЗржХрзЗ ржЕ-JSON рж░рзЗрж╕ржкржирзНрж╕ ржЖрж╕рзЗ)ред
        await update.message.reply_text(
            "API ржерзЗржХрзЗ ржкрж╛ржУржпрж╝рж╛ ржбрзЗржЯрж╛ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗред"
        )
        logger.error(f"JSON parsing error for UID {uid}: {e}")
    except Exception as e:
        # ржЕржирзНржпрж╛ржирзНржп ржЕржкрзНрж░рждрзНржпрж╛рж╢рж┐ржд ржПрж░рж░ рж╣рзНржпрж╛ржирзНржбрж▓рж┐ржВред
        await update.message.reply_text(
            "ржПржХржЯрж┐ ржЕржкрзНрж░рждрзНржпрж╛рж╢рж┐ржд ржПрж░рж░ рж╣ржпрж╝рзЗржЫрзЗред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржбрзЗржнрзЗрж▓ржкрж╛рж░рзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред"
        )
        logger.error(f"An unexpected error occurred for UID {uid}: {e}", exc_info=True)


def main() -> None:
    """
    ржмржЯ рж╢рзБрж░рзБ ржХрж░рж╛рж░ ржорзВрж▓ ржлрж╛ржВрж╢ржиред
    ржПржЯрж┐ ржмржЯ ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржи рждрзИрж░рж┐ ржХрж░рзЗ, ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ржпрзЛржЧ ржХрж░рзЗ ржПржмржВ ржкрзЛрж▓рж┐ржВ рж╢рзБрж░рзБ ржХрж░рзЗред
    """
    # Application ржХрзНрж▓рж╛рж╕ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржмржЯ ржЗржирж╕рзНржЯрзНржпрж╛ржирзНрж╕ рждрзИрж░рж┐ ржХрж░рзБржиред
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ржпрзЛржЧ ржХрж░рзБржиред
    # '/start' ржХржорж╛ржирзНржб ржПрж▓рзЗ 'start' ржлрж╛ржВрж╢ржиржЯрж┐ ржХрж▓ рж╣ржмрзЗред
    application.add_handler(CommandHandler("start", start))
    # '/player_info' ржХржорж╛ржирзНржб ржПрж▓рзЗ 'player_info' ржлрж╛ржВрж╢ржиржЯрж┐ ржХрж▓ рж╣ржмрзЗред
    application.add_handler(CommandHandler("player_info", player_info))

    # ржкрзЛрж▓рж┐ржВ рж╢рзБрж░рзБ ржХрж░рзБржи (ржмржЯ ржирждрзБржи ржЖржкржбрзЗржЯрзЗрж░ ржЬржирзНржп ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо рж╕рж╛рж░рзНржнрж╛рж░ ржЪрзЗржХ ржХрж░ржмрзЗ)ред
    logger.info("Bot is starting polling...")
    # 'allowed_updates=Update.ALL_TYPES' ржорж╛ржирзЗ ржмржЯ рж╕ржм ржзрж░ржирзЗрж░ ржЖржкржбрзЗржЯ (ржорзЗрж╕рзЗржЬ, ржХрж▓ржмрзНржпрж╛ржХ, ржЗрждрзНржпрж╛ржжрж┐) ржЧрзНрж░рж╣ржг ржХрж░ржмрзЗред
    application.run_polling(allowed_updates=Update.ALL_TYPES)
    logger.info("Bot has stopped polling.")


if __name__ == "__main__":
    # ржпржЦржи рж╕рзНржХрзНрж░рж┐ржкрзНржЯржЯрж┐ рж╕рж░рж╛рж╕рж░рж┐ рж░рж╛ржи ржХрж░рж╛ рж╣ржмрзЗ, рждржЦржи main() ржлрж╛ржВрж╢ржиржЯрж┐ ржХрж▓ рж╣ржмрзЗред
    main()
